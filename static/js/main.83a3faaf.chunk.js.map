{"version":3,"sources":["components/ImportModal.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","ImportModal","open","onClose","id","onDelete","onSubmit","type","classes","React","useState","name","setName","state","setState","useEffect","localData","getDataLocal","length","content","Dialog","className","DialogTitle","DialogContent","TextField","label","value","onChange","e","target","margin","fullWidth","variant","multiline","minRows","placeholder","Tooltip","title","DialogActions","Box","p","display","Button","color","onClick","JSON","parse","localStorage","getItem","data","push","setItem","stringify","startIcon","ml","splice","App","setOpen","input","setInput","result","setResult","setType","choices","setChoices","option","setOption","handleOpenModal","Grid","container","spacing","item","xs","sm","md","lg","xl","mt","mr","mapObject","inputs","split","forEach","join","getResult","partern","parterns","temp","trim","getMapObject","minWidth","Select","style","map","index","MenuItem","marginLeft","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83a3faaf.chunk.js","sourcesContent":["import {\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  makeStyles,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { getDataLocal } from \"../App\";\nimport HighlightOffOutlinedIcon from \"@material-ui/icons/HighlightOffOutlined\";\nimport SaveAltOutlinedIcon from \"@material-ui/icons/SaveAltOutlined\";\nimport HelpOutline from \"@material-ui/icons/HelpOutline\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    // minWidth: 600,\n  },\n}));\n\nexport default function ImportModal({\n  open,\n  onClose,\n  id,\n  onDelete,\n  onSubmit,\n  type,\n}) {\n  const classes = useStyles();\n\n  const [name, setName] = React.useState(\"\");\n  const [state, setState] = React.useState(\"\");\n\n  const handleSubmit = () => {\n    const localData = JSON.parse(localStorage.getItem(\"DATA\") || \"[]\");\n    const data = {\n      id: localData.length,\n      name,\n      content: state,\n    };\n    localData.push(data);\n    localStorage.setItem(\"DATA\", JSON.stringify(localData));\n    onClose();\n    onSubmit();\n    setName(\"\");\n    setState(\"\");\n  };\n\n  const handleDelete = () => {\n    const localData = getDataLocal();\n    localData.splice(id, 1);\n    localStorage.setItem(\"DATA\", JSON.stringify(localData));\n    onClose();\n    onDelete();\n    setName(\"\");\n    setState(\"\");\n  };\n\n  React.useEffect(() => {\n    const localData = getDataLocal();\n    if (localData.length && type === \"CLONE\") {\n      setName(localData[id].name);\n      setState(localData[id].content);\n    }\n\n    if (type === \"IMPORT\") {\n      setName(\"\");\n      setState(\"\");\n    }\n  }, [id, open, type]);\n\n  return (\n    <Dialog open={open} onClose={onClose} className={classes.root}>\n      <DialogTitle>Import Bộ Quy Tắc</DialogTitle>\n      <DialogContent className={classes.root}>\n        <TextField\n          label=\"Tên quy tắc\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          margin=\"dense\"\n          fullWidth\n          variant=\"outlined\"\n        />\n        <TextField\n          margin=\"dense\"\n          label=\"Nội dung\"\n          fullWidth\n          multiline\n          minRows={10}\n          variant=\"outlined\"\n          value={state}\n          onChange={(e) => setState(e.target.value)}\n          placeholder=\"Example: H=K, U=I, D=M\"\n        />\n        <Tooltip title=\"Cách nhau dấu phẩy, vui lòng nhập đúng format\">\n          <HelpOutline />\n        </Tooltip>\n      </DialogContent>\n      <DialogActions>\n        <Box p={2} display=\"flex\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleSubmit}\n            startIcon={<SaveAltOutlinedIcon />}\n          >\n            Submit\n          </Button>\n          {type === \"CLONE\" ? (\n            <Box ml={1}>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={handleDelete}\n                startIcon={<HighlightOffOutlinedIcon />}\n              >\n                Delete\n              </Button>\n            </Box>\n          ) : null}\n        </Box>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React from \"react\";\nimport {\n  Box,\n  Button,\n  Grid,\n  MenuItem,\n  Select,\n  TextField,\n} from \"@material-ui/core\";\nimport ImportModal from \"./components/ImportModal\";\nimport CompareArrowsOutlinedIcon from \"@material-ui/icons/CompareArrowsOutlined\";\nimport ImportExportOutlinedIcon from \"@material-ui/icons/ImportExportOutlined\";\nimport AutorenewOutlinedIcon from \"@material-ui/icons/AutorenewOutlined\";\nimport \"./App.css\";\n\nconst getResult = (input, mapObject) => {\n  const inputs = input.split(\"\");\n  const result = [];\n  inputs.forEach((input) => {\n    result.push(mapObject[input] || input);\n  });\n  return result.join(\"\");\n};\n\nconst getMapObject = (partern) => {\n  const parterns = partern.split(\",\");\n  const result = {};\n  parterns.forEach((item) => {\n    const temp = item.split(\"=\");\n    result[temp[0].trim()] = temp[1].trim();\n  });\n  return result;\n};\n\nexport const getDataLocal = () => {\n  return JSON.parse(localStorage.getItem(\"DATA\") || \"[]\");\n};\n\nfunction App() {\n  const [open, setOpen] = React.useState(false);\n  const [input, setInput] = React.useState(\"\");\n  const [result, setResult] = React.useState(\"\");\n  const [type, setType] = React.useState(\"IMPORT\");\n\n  const [choices, setChoices] = React.useState(getDataLocal());\n  const [option, setOption] = React.useState(0);\n\n  const handleConvert = () => {\n    const data = getResult(input, getMapObject(choices[option].content));\n    setResult(data);\n  };\n\n  const handleOpenModal = () => {\n    setOpen(true);\n  };\n\n  const handleDelete = () => {\n    setOption(0);\n    setChoices(getDataLocal());\n  };\n\n  const handleSubmit = () => {\n    setOption(0);\n    setChoices(getDataLocal());\n  };\n\n  const handleImport = () => {\n    setType(\"IMPORT\");\n    handleOpenModal();\n  };\n\n  const handleClone = () => {\n    setType(\"CLONE\");\n    handleOpenModal();\n  };\n\n  return (\n    <Box p={2}>\n      <Grid container spacing={2}>\n        <Grid item xs={12} sm={12} md={6} lg={6} xl={6}>\n          <TextField\n            minRows={10}\n            multiline\n            variant=\"outlined\"\n            fullWidth\n            label=\"Input\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n          />\n        </Grid>\n        <Grid item xs={12} sm={12} md={6} lg={6} xl={6}>\n          <TextField\n            minRows={10}\n            multiline\n            variant=\"outlined\"\n            fullWidth\n            label=\"Result\"\n            value={result}\n          />\n        </Grid>\n      </Grid>\n      <Box mt={2} display=\"flex\">\n        <Box mr={1}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleConvert}\n            startIcon={<CompareArrowsOutlinedIcon />}\n          >\n            Convert\n          </Button>\n        </Box>\n        <Box>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleImport}\n            startIcon={<ImportExportOutlinedIcon />}\n          >\n            Import\n          </Button>\n        </Box>\n      </Box>\n      <Box minWidth={200} display=\"flex\" mt={2}>\n        <Select\n          variant=\"outlined\"\n          margin=\"dense\"\n          value={option}\n          onChange={(e) => setOption(e.target.value)}\n          style={{ minWidth: 100 }}\n        >\n          {choices.map((item, index) => (\n            <MenuItem key={index} value={index}>\n              {item.name}\n            </MenuItem>\n          ))}\n        </Select>\n        {choices.length ? (\n          <Button\n            onClick={handleClone}\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ marginLeft: 10 }}\n            startIcon={<AutorenewOutlinedIcon />}\n          >\n            Clone\n          </Button>\n        ) : null}\n      </Box>\n      <ImportModal\n        open={open}\n        onClose={() => setOpen(false)}\n        id={option}\n        onDelete={handleDelete}\n        onSubmit={handleSubmit}\n        type={type}\n      />\n    </Box>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}